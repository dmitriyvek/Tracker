"""initail schema

Revision ID: 2dcdc2c34156
Revises: 
Create Date: 2021-03-09 11:44:31.205823

"""
from alembic import op
import sqlalchemy as sa

from tracker.db.schema import UserRole, TicketPriority, TicketStatus, TicketType


# revision identifiers, used by Alembic.
revision = '2dcdc2c34156'
down_revision = None
branch_labels = None
depends_on = None


UserRoleEnum = sa.Enum(UserRole, name='role')
TicketPriorityEnum = sa.Enum(TicketPriority, name='priority')
TicketStatusEnum = sa.Enum(TicketStatus, name='status')
TicketTypeEnum = sa.Enum(TicketType, name='type')


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('blacklist_tokens',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('token', sa.String(), nullable=False),
                    sa.Column('blacklisted_at', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint(
                        'id', name=op.f('pk__blacklist_tokens')),
                    comment='Storage for blacklisted jwt auth tokens'
                    )
    op.create_index(op.f('ix__blacklist_tokens__token'),
                    'blacklist_tokens', ['token'], unique=True)
    op.create_table('users',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('password', sa.String(), nullable=False),
                    sa.Column('email', sa.String(), nullable=False),
                    sa.Column('registered_at', sa.DateTime(), nullable=False),
                    sa.Column('is_admin', sa.Boolean(), nullable=False,
                              comment='If user has admin priviliges in app'),
                    sa.Column('is_deleted', sa.Boolean(), nullable=False),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk__users')),
                    sa.UniqueConstraint(
                        'email', name=op.f('uq__users__email')),
                    comment='Representation of user'
                    )
    op.create_table('projects',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('is_deleted', sa.Boolean(), nullable=False),
                    sa.Column('created_by', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f(
                        'fk__projects__created_by__users'), ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk__projects')),
                    sa.UniqueConstraint(
                        'title', name=op.f('uq__projects__title')),
                    comment='Representation of project (collection of tickets and user roles)'
                    )
    op.create_table('roles',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('role', sa.Enum(
                        'project_manager', 'team_member', 'viewer', name='role'), nullable=False),
                    sa.Column('assign_at', sa.DateTime(), nullable=False),
                    sa.Column('is_deleted', sa.Boolean(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('project_id', sa.Integer(), nullable=False),
                    sa.Column('assign_by', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['assign_by'], ['users.id'], name=op.f(
                        'fk__roles__assign_by__users'), ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f(
                        'fk__roles__project_id__projects'), ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f(
                        'fk__roles__user_id__users'), ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk__roles')),
                    comment='Description of what role the user has in which project'
                    )
    op.create_table('tickets',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('title', sa.String(), nullable=False),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('status', sa.Enum('open', 'in_progress',
                                                'done', name='status'), nullable=False),
                    sa.Column('priority', sa.Enum('none', 'low', 'medium',
                                                  'hight', name='priority'), nullable=False),
                    sa.Column('type', sa.Enum('bug_or_error', 'feature_request',
                                              'document_request', 'other', name='type'), nullable=False),
                    sa.Column('is_deleted', sa.Boolean(), nullable=False),
                    sa.Column('created_by', sa.Integer(), nullable=False),
                    sa.Column('assigned_to', sa.Integer(), nullable=False),
                    sa.Column('project_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['assigned_to'], ['users.id'], name=op.f(
                        'fk__tickets__assigned_to__users'), ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f(
                        'fk__tickets__created_by__users'), ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f(
                        'fk__tickets__project_id__projects'), ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk__tickets')),
                    sa.UniqueConstraint(
                        'title', name=op.f('uq__tickets__title'))
                    )
    op.create_table('comments',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('content', sa.String(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('is_deleted', sa.Boolean(), nullable=False),
                    sa.Column('ticket_id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.Integer(), nullable=False,
                              comment="Id of comment's author"),
                    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], name=op.f(
                        'fk__comments__ticket_id__tickets'), ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f(
                        'fk__comments__user_id__users'), ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk__comments')),
                    comment='Users comments on tickets'
                    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('comments')
    op.drop_table('tickets')
    op.drop_table('roles')
    op.drop_table('projects')
    op.drop_table('users')
    op.drop_index(op.f('ix__blacklist_tokens__token'),
                  table_name='blacklist_tokens')
    op.drop_table('blacklist_tokens')
    # ### end Alembic commands ###

    UserRoleEnum.drop(op.get_bind())
    TicketPriorityEnum.drop(op.get_bind())
    TicketTypeEnum.drop(op.get_bind())
    TicketStatusEnum.drop(op.get_bind())
